substitutions:
  led_gpio: GPIO15
  rel1_gpio: GPIO27
  rel2_gpio: GPIO14
  rel3_gpio: GPIO12
  rel4_gpio: GPIO13
  rel5_gpio: GPIO2
  rel6_gpio: GPIO4
  rel7_gpio: GPIO5
  rel8_gpio: GPIO18

  devicename: athom-sprinkler
  controllername: sprinkler_controller
  formated_name: Sprinkler
  comment: |-
    Sprinkler Controller
    Backyard

    Location: Green Garden Backyard
    Device: Sonoff 4ch R3

  valve_switch_1_name: (ch1) Terraza
  valve_switch_2_name: (ch2) Jardinera Fondo
  valve_switch_3_name: (ch3) Pasto Shine
  valve_switch_4_name: (ch4) Pasto Shade
  valve_switch_5_name: (ch5) Greengarden
  valve_switch_6_name: (ch6) Jardineras Estacionamiento
  valve_switch_7_name: (ch7) Jardin Entrada
  valve_switch_8_name: (ch8) Pasto Antejardin

  sensor_update_frequency: 1s

<<: !include common/esphome/esp32dev_sprinkler.yaml

<<: !include common/common_irrigation.yaml

esp32_ble_tracker:
  scan_parameters:
    interval: 1100ms
    window: 1100ms
    active: true

bluetooth_proxy:
  active: true

sprinkler:
  - id: $controllername
    main_switch: ${formated_name} - Run Now All
    auto_advance_switch:
      name: ${formated_name} - Auto Enabled
      restore_mode: RESTORE_DEFAULT_ON
    standby_switch:
      name: ${formated_name} - Standby
      restore_mode: RESTORE_DEFAULT_OFF
    multiplier_number:
      name: "${formated_name} - Multiplier"
      initial_value: 1
      unit_of_measurement: times
      min_value: 0.1
      max_value: 5
    valves:
      # (ch1) Terraza
      - valve_switch: $valve_switch_1_name - Run
        valve_switch_id: relay1
        enable_switch:
          name: $valve_switch_1_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_1_name - Duration
          initial_value: 20
          unit_of_measurement: min
      # (ch2) Jardinera Fondo
      - valve_switch: $valve_switch_2_name - Run
        valve_switch_id: relay2
        enable_switch:
          name: $valve_switch_2_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_2_name - Duration
          initial_value: 20
          unit_of_measurement: min
      # (ch3) Pasto Shine
      - valve_switch: $valve_switch_3_name - Run
        valve_switch_id: relay3
        enable_switch:
          name: $valve_switch_3_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_3_name - Duration
          initial_value: 10
          unit_of_measurement: min
      # (ch4) Pasto Shade
      - valve_switch: $valve_switch_4_name - Run
        valve_switch_id: relay4
        enable_switch:
          name: $valve_switch_4_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_4_name - Duration
          initial_value: 3
          unit_of_measurement: min
      # (ch5) Greengarden
      - valve_switch: $valve_switch_5_name - Run
        valve_switch_id: relay5
        enable_switch:
          name: $valve_switch_5_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_5_name - Duration
          initial_value: 2
          unit_of_measurement: min
      # (ch6) Jardineras Estacionamiento
      - valve_switch: $valve_switch_6_name - Run
        valve_switch_id: relay6
        enable_switch:
          name: $valve_switch_6_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_6_name - Duration
          initial_value: 5
          unit_of_measurement: min
      # (ch7) Jardin Entrada
      - valve_switch: $valve_switch_7_name - Run
        valve_switch_id: relay7
        enable_switch:
          name: $valve_switch_7_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_7_name - Duration
          initial_value: 20
          unit_of_measurement: min
      # (ch8) Pasto Antejardin
      - valve_switch: $valve_switch_8_name - Run
        valve_switch_id: relay8
        enable_switch:
          name: $valve_switch_8_name - Auto
          restore_mode: RESTORE_DEFAULT_ON
        run_duration_number:
          name: $valve_switch_8_name - Duration
          initial_value: 15
          unit_of_measurement: min

sensor:
  # Reports how long the device has been powered (in hours) since last reboot
  - platform: uptime
    name: ${formated_name} - Uptime
  - platform: wifi_signal
    name: "${formated_name} - Wifi Signal"

  - platform: template
    id: progress
    name: ${formated_name} Progress
    update_interval: $sensor_update_frequency
    unit_of_measurement: "%"
    accuracy_decimals: 0
    icon: "mdi:progress-clock"
    filters:
      - delta: 1.0
    lambda: |-
      auto active_valve = id($controllername).active_valve().value_or(0);
      auto run_duration = id($controllername).valve_run_duration_adjusted(active_valve);
      auto remaining_active_valve = id($controllername).time_remaining_active_valve().value_or(0);
      if (run_duration == 0) {
        return 0;  // Prevent division by zero
      }
      return (run_duration - remaining_active_valve) * 100 / run_duration;

time:
  - platform: homeassistant
    id: homeassistant_time
    timezone: <+03>3
    on_time_sync:
      then:
        - logger.log:
            level: INFO
            format:  "Time synchronized 2"

  - platform: sntp
    id: sntp_time
    timezone: <+03>3
    on_time_sync:
      then:
        - logger.log:
            level: INFO
            format:  "Time synchronized"
    on_time:
      # Every morning on weekdays
      - seconds: 0
        minutes: 30
        hours: 22
        then:
          - sprinkler.start_full_cycle: $controllername
      - seconds: 0
        minutes: 36
        hours: 10
        then:
          - lambda: |-
              ESP_LOGI("interval_logger", "Start trigger, flag set");
              id(flag_start_process) = true;

number:
  - platform: homeassistant
    id: sprinkler_start_offset
    name: Start offset
    entity_id: input_number.sprinkler_start_offset
    on_value:
      then:
        - lambda: |-
            id(start_offset_minutes) = (int) x;
            ESP_LOGI("main", "Variable set from Home Assistant: %d", id(start_offset_minutes));

interval:
  - interval: 1min
    then:
      - lambda: |-
          ESP_LOGI("interval_logger", "Checking Flag");
          if (id(flag_start_process)) {
            if (id(start_offset_minutes)-- > 0) {
              ESP_LOGI("interval_logger", "Countdown in progress: %d minutes remaining", id(start_offset_minutes));
            } else {
              // Countdown reached 0, start the process
              id(flag_start_process) = false; // Reset flag
              ESP_LOGI("interval_logger", "Countdown complete. Starting the controller function.");
              // id(controller_component).start();
            }
          }

globals:
  - id: start_offset_minutes
    type: int
    restore_value: no
    initial_value: '0'  # Default offset in minutes, can be modified
  - id: flag_start_process
    type: bool
    restore_value: yes
    initial_value: 'false'

switch:
  - platform: gpio
    id: relay1
    name: "irrigation_relay1"
    pin: $rel1_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay2
    name: "irrigation_relay2"
    pin: $rel2_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay3
    name: "irrigation_relay3"
    pin: $rel3_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay4
    name: "irrigation_relay4"
    pin: $rel4_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay5
    name: "irrigation_relay5"
    pin: $rel5_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay6
    name: "irrigation_relay6"
    pin: $rel6_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay7
    name: "irrigation_relay7"
    pin: $rel7_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: gpio
    id: relay8
    name: "irrigation_relay8"
    pin: $rel8_gpio
    internal: true # Prevents GPIO switch NAME from showing up in Home Assistant
    restore_mode: RESTORE_DEFAULT_OFF  # Prevents GPIO pin from going high during boot

  - platform: restart
    name: "Restart"

text_sensor:
  # Expose Valve Status as a sensor.
  - platform: template
    id: valve_status
    name: ${formated_name} Status
    update_interval: $sensor_update_frequency
    icon: "mdi:information-variant"
    filters:
    - lambda: |-
        static std::string last;
        if (x == last)
          return {};
        last = x;
        return x;
    lambda: |-
      int active_valve_number = id($controllername).active_valve().value_or(0);
      if (active_valve_number > 0) {
        return std::string(id($controllername).valve_name(active_valve_number));
      }
      return std::string(id($controllername).standby() ? "Standby" : "Idle");

  # Expose Time Remaining for running zone as a sensor.
  - platform: template
    id: current_time_remaining
    name: Current Valve Time Remaining
    update_interval: $sensor_update_frequency
    icon: "mdi:timer-sand"
    filters:
    - lambda: |-
        static std::string last;
        if (x == last)
          return {};
        last = x;
        return x;
    lambda: |-
      int seconds = round(id($controllername).time_remaining_active_valve().value_or(0));
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
        return {
          ((days ? std::to_string(days) + "d " : "") +
          (hours ? std::to_string(hours) + "h " : "") +
          (minutes ? std::to_string(minutes) + "m " : "") +
          (std::to_string(seconds) + "s")).c_str()};

  - platform: template
    id: total_time_remaining
    name: Program Total Time Remaining
    update_interval: $sensor_update_frequency
    icon: "mdi:timer-sand"
    filters:
    - lambda: |-
        static std::string last;
        if (x == last)
          return {};
        last = x;
        return x;
    lambda: |-
      int seconds = round(id($controllername).time_remaining_current_operation().value_or(0));
      int days = seconds / (24 * 3600);
      seconds = seconds % (24 * 3600);
      int hours = seconds / 3600;
      seconds = seconds % 3600;
      int minutes = seconds /  60;
      seconds = seconds % 60;
        return {
          ((days ? std::to_string(days) + "d " : "") +
          (hours ? std::to_string(hours) + "h " : "") +
          (minutes ? std::to_string(minutes) + "m " : "") +
          (std::to_string(seconds) + "s")).c_str()};

logger:
  level: VERBOSE

status_led:
  pin:
    number: $led_gpio
    inverted: True
